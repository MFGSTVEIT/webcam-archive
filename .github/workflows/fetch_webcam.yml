name: Fetch Webcam Image

on:
  workflow_dispatch:   # manuell starten
  #schedule:           # kannst du wieder aktivieren
  #  - cron: "*/15 * * * *"

jobs:
  fetch:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download webcam.jpg
        run: |
          URL="https://raw.githubusercontent.com/MFGSTVEIT/Webcam/master/webcam.jpg"
          TMP_IMG=$(mktemp /tmp/webcam-XXXX.jpg)
          curl -s -o "$TMP_IMG" "$URL"
          echo "TMP_IMG=$TMP_IMG" >> $GITHUB_ENV

      - name: Extract upload date from image
        id: extract
        run: |
          TMP_IMG="${{ env.TMP_IMG }}"

          LINE=$(strings "$TMP_IMG" | grep -i "Automatischer Upload" | tail -n1 || true)
          echo "Found line: $LINE"

          if [ -z "$LINE" ]; then
            echo "No upload line found in image."
            echo "ok=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Beispiel: Automatischer Upload: 2025-09-29 09:45:08
          UPLOAD_DATE=$(echo "$LINE" | sed -E 's/.*([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}).*/\1/')

          if ! date -d "$UPLOAD_DATE" >/dev/null 2>&1; then
            echo "Invalid date: $UPLOAD_DATE"
            echo "ok=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          TS=$(date -d "$UPLOAD_DATE" +%s)
          DATE_PART=$(date -d "$UPLOAD_DATE" +%Y-%m-%d)
          TIME_PART=$(date -d "$UPLOAD_DATE" +%H%M)

          echo "UPLOAD_DATE=$UPLOAD_DATE"
          echo "DATE_PART=$DATE_PART"
          echo "TIME_PART=$TIME_PART"
          echo "TS=$TS"

          echo "ok=true" >> $GITHUB_OUTPUT
          echo "date_part=$DATE_PART" >> $GITHUB_OUTPUT
          echo "time_part=$TIME_PART" >> $GITHUB_OUTPUT
          echo "ts=$TS" >> $GITHUB_OUTPUT

      - name: Save if newer
        if: steps.extract.outputs.ok == 'true'
        run: |
          DATE_PART="${{ steps.extract.outputs.date_part }}"
          TIME_PART="${{ steps.extract.outputs.time_part }}"
          TS="${{ steps.extract.outputs.ts }}"
          TMP_IMG="${{ env.TMP_IMG }}"

          ARCH_DIR="images/$DATE_PART"
          mkdir -p "$ARCH_DIR"

          # neuestes archiviertes Bild in diesem Ordner finden
          LAST_TS=0
          for f in "$ARCH_DIR"/*.jpg; do
            [ -f "$f" ] || continue
            base=$(basename "$f" .jpg)
            hh=${base:0:2}
            mm=${base:2:2}
            file_ts=$(date -d "$DATE_PART $hh:$mm:00" +%s 2>/dev/null || echo 0)
            [ "$file_ts" -gt "$LAST_TS" ] && LAST_TS=$file_ts
          done

          echo "Latest archived TS: $LAST_TS"
          echo "Current upload TS: $TS"

          if [ "$TS" -le "$LAST_TS" ]; then
            echo "No new image (upload not newer)."
            exit 0
          fi

          TARGET="$ARCH_DIR/$TIME_PART.jpg"
          cp "$TMP_IMG" "$TARGET"
          echo "Saved new image $TARGET"

      - name: Update manifests
        run: |
          for d in images/*/; do
            [ -d "$d" ] || continue
            FILES=$(ls -1 "$d" | grep '\.jpg$' | sort)
            echo "{" > "$d/manifest.json"
            echo "  \"images\": [" >> "$d/manifest.json"
            for f in $FILES; do
              echo "    \"$(basename $f)\"," >> "$d/manifest.json"
            done
            sed -i '$ s/,$//' "$d/manifest.json"
            echo "  ]" >> "$d/manifest.json"
            echo "}" >> "$d/manifest.json"
          done

          DAYS=$(ls -1 images | sort -r)
          echo "{" > images/manifest.json
          echo "  \"days\": [" >> images/manifest.json
          for d in $DAYS; do
            [ -d "images/$d" ] && echo "    \"$d\"," >> images/manifest.json
          done
          sed -i '$ s/,$//' images/manifest.json
          echo "  ]" >> images/manifest.json
          echo "}" >> images/manifest.json

      - name: Commit and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add images
          git commit -m "Add webcam image ${{ steps.extract.outputs.date_part }} ${{ steps.extract.outputs.time_part }}" || exit 0
          git push
