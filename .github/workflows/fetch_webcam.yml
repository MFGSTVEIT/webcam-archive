name: Fetch Webcam Image

on:
  schedule:
    - cron: "*/15 8-19 * * *"   # alle 15 Minuten zwischen 08:00 und 20:00 Uhr
  workflow_dispatch:             # manuelles Starten möglich

jobs:
  fetch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo (mit vollständiger History)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Date Variables
        run: |
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "TIME=$(date +'%H%M')" >> $GITHUB_ENV

      - name: Create Directory for Today
        run: mkdir -p images/$DATE

      - name: Download Webcam Image
        run: |
          curl -s -o images/$DATE/$TIME.jpg https://raw.githubusercontent.com/MFGSTVEIT/Webcam/master/webcam.jpg

      - name: Cleanup Old Directories (older than 30 days)
        run: |
          find images/ -type d -mtime +30 -exec rm -rf {} +

      - name: Update daily manifests
        run: |
          for d in images/*/; do
            if [ -d "$d" ]; then
              FILES=$(ls -1 "$d" | grep '\.jpg$' | sort)
              echo "{" > "$d/manifest.json"
              echo "  \"images\": [" >> "$d/manifest.json"
              for f in $FILES; do
                echo "    \"$f\"," >> "$d/manifest.json"
              done
              sed -i '$ s/,$//' "$d/manifest.json"
              echo "  ]" >> "$d/manifest.json"
              echo "}" >> "$d/manifest.json"
            fi
          done

      - name: Update global manifest.json
        run: |
          mkdir -p images
          DAYS=$(ls -1 images | sort -r)   # neueste zuerst
          echo "{" > images/manifest.json
          echo "  \"days\": [" >> images/manifest.json
          for d in $DAYS; do
            if [ -d "images/$d" ]; then
              echo "    \"$d\"," >> images/manifest.json
            fi
          done
          sed -i '$ s/,$//' images/manifest.json
          echo "  ]" >> images/manifest.json
          echo "}" >> images/manifest.json
          cat images/manifest.json

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # aktuellen Stand holen und rebasen
          git fetch origin main
          git rebase origin/main || true

          git add images
          git commit -m "Add webcam image $DATE $TIME" || echo "No changes"
          git push origin HEAD:main
