name: Fetch Webcam Image

on:
  #schedule:
    # Sommerzeit (März–Oktober, UTC+2)
    #- cron: "*/5 6-17 * 3,4,5,6,7,8,9,10 *"
    #- cron: "5 17 * 3,4,5,6,7,8,9,10 *"

    # Winterzeit (November–Februar, UTC+1)
    #- cron: "*/5 7-18 * 11,12,1,2 *"
    #- cron: "5 18 * 11,12,1,2 *"

  workflow_dispatch:

concurrency:
  group: webcam-archive
  cancel-in-progress: false

jobs:
  fetch:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Date Variable
        run: |
          DATE=$(date +'%Y-%m-%d')
          echo "DATE=$DATE" >> $GITHUB_ENV

      - name: Download current webcam.jpg
        run: |
          URL="https://raw.githubusercontent.com/MFGSTVEIT/Webcam/master/webcam.jpg"
          TMP_IMG=$(mktemp /tmp/webcam-XXXX.jpg)
          curl -s -o "$TMP_IMG" "$URL"
          echo "TMP_IMG=$TMP_IMG" >> $GITHUB_ENV

      - name: Extract upload timestamp from image
        run: |
          # Datum im Bild suchen
          UPLOAD_DATE=$(strings "$TMP_IMG" | grep -oP "Automatischer Upload: \K[0-9-]{10} [0-9:]{8}" | tail -1)

          if [ -z "$UPLOAD_DATE" ]; then
            echo "❌ Kein eingebettetes Datum gefunden, breche ab."
            exit 0
          fi

          DATE_PART=$(date -d "$UPLOAD_DATE" +%Y-%m-%d)
          TIME_PART=$(date -d "$UPLOAD_DATE" +%H%M)

          echo "UPLOAD_DATE=$UPLOAD_DATE" >> $GITHUB_ENV
          echo "DATE=$DATE_PART" >> $GITHUB_ENV
          echo "TIME=$TIME_PART" >> $GITHUB_ENV

          echo "📸 Gefunden: $UPLOAD_DATE"

      - name: Check if image already exists
        run: |
          TARGET="images/$DATE/$TIME.jpg"
          if [ -f "$TARGET" ]; then
            echo "⚠️ Bild $TARGET existiert bereits – überspringe."
            exit 0
          fi
          mkdir -p "images/$DATE"
          cp "$TMP_IMG" "$TARGET"
          echo "✅ Neues Bild gespeichert: $TARGET"

      - name: Cleanup Old Directories (older than 30 days)
        run: |
          find images/ -maxdepth 1 -type d -mtime +30 -exec rm -rf {} +

      - name: Update daily manifests
        run: |
          for d in images/*/; do
            if [ -d "$d" ]; then
              FILES=$(ls -1 "$d" | grep '\.jpg$' | sort)
              echo "{" > "$d/manifest.json"
              echo "  \"images\": [" >> "$d/manifest.json"
              for f in $FILES; do
                echo "    \"$(basename $f)\"," >> "$d/manifest.json"
              done
              sed -i '$ s/,$//' "$d/manifest.json"
              echo "  ]" >> "$d/manifest.json"
              echo "}" >> "$d/manifest.json"
            fi
          done

      - name: Update global manifest.json
        run: |
          mkdir -p images
          DAYS=$(ls -1 images | sort -r)
          echo "{" > images/manifest.json
          echo "  \"days\": [" >> images/manifest.json
          for d in $DAYS; do
            if [ -d "images/$d" ]; then
              echo "    \"$d\"," >> images/manifest.json
            fi
          done
          sed -i '$ s/,$//' images/manifest.json
          echo "  ]" >> images/manifest.json
          echo "}" >> images/manifest.json

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add images
          git commit -m "Add webcam image $UPLOAD_DATE" || echo "No changes"

          for i in 1 2 3; do
            git pull --rebase origin main && git push origin HEAD:main && break
            echo "Push fehlgeschlagen, retry ($i/3)..."
            sleep 5
          done
