name: Fetch Webcam Image

on:
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest commit date of webcam.jpg
        id: commitinfo
        run: |
          API_URL="https://api.github.com/repos/MFGSTVEIT/Webcam/commits?path=webcam.jpg&per_page=1"
          JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL")

          COMMIT_DATE=$(echo "$JSON" | jq -r '.[0].commit.committer.date')
          echo "Commit date: $COMMIT_DATE"

          DATE_PART=$(date -d "$COMMIT_DATE" +%Y-%m-%d)
          TIME_PART=$(date -d "$COMMIT_DATE" +%H%M)
          TS=$(date -d "$COMMIT_DATE" +%s)

          echo "date_part=$DATE_PART" >> $GITHUB_OUTPUT
          echo "time_part=$TIME_PART" >> $GITHUB_OUTPUT
          echo "ts=$TS" >> $GITHUB_OUTPUT

      - name: Download webcam.jpg
        run: |
          URL="https://raw.githubusercontent.com/MFGSTVEIT/Webcam/master/webcam.jpg"
          curl -s -o webcam.jpg "$URL"

      - name: Save if newer
        run: |
          DATE_PART="${{ steps.commitinfo.outputs.date_part }}"
          TIME_PART="${{ steps.commitinfo.outputs.time_part }}"
          TS="${{ steps.commitinfo.outputs.ts }}"

          ARCH_DIR="images/$DATE_PART"
          mkdir -p "$ARCH_DIR"

          # letztes Bild in diesem Ordner finden
          LAST_TS=0
          for f in "$ARCH_DIR"/*.jpg; do
            [ -f "$f" ] || continue
            base=$(basename "$f" .jpg)
            hh=${base:0:2}
            mm=${base:2:2}
            file_ts=$(date -d "$DATE_PART $hh:$mm:00" +%s 2>/dev/null || echo 0)
            [ "$file_ts" -gt "$LAST_TS" ] && LAST_TS=$file_ts
          done

          echo "Latest archived TS: $LAST_TS"
          echo "New TS: $TS"

          if [ "$TS" -le "$LAST_TS" ]; then
            echo "No new image â€“ skipping"
            exit 0
          fi

          TARGET="$ARCH_DIR/$TIME_PART.jpg"
          cp webcam.jpg "$TARGET"
          echo "Saved new image: $TARGET"

      - name: Cleanup old directories
        run: |
          KEEP_DAYS=7   # ðŸ”¹ hier Anzahl der Tage einstellen
          echo "Keeping only the last $KEEP_DAYS days of images."

          find images -maxdepth 1 -type d -regex "images/[0-9]{4}-[0-9]{2}-[0-9]{2}" | while read dir; do
            dirdate=$(basename "$dir")
            if [[ "$dirdate" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
              if [ $(date -d "$dirdate" +%s) -lt $(date -d "$KEEP_DAYS days ago" +%s) ]; then
                echo "Removing old directory: $dir"
                rm -rf "$dir"
              fi
            fi
          done

      - name: Update manifests
        run: |
          for d in images/*/; do
            [ -d "$d" ] || continue
            FILES=$(ls -1 "$d" | grep '\.jpg$' | sort)
            echo "{" > "$d/manifest.json"
            echo "  \"images\": [" >> "$d/manifest.json"
            for f in $FILES; do
              echo "    \"$(basename $f)\"," >> "$d/manifest.json"
            done
            sed -i '$ s/,$//' "$d/manifest.json"
            echo "  ]" >> "$d/manifest.json"
            echo "}" >> "$d/manifest.json"
          done

          DAYS=$(ls -1 images | sort -r)
          echo "{" > images/manifest.json
          echo "  \"days\": [" >> images/manifest.json
          for d in $DAYS; do
            [ -d "images/$d" ] && echo "    \"$d\"," >> images/manifest.json
          done
          sed -i '$ s/,$//' images/manifest.json
          echo "  ]" >> images/manifest.json
          echo "}" >> images/manifest.json

      - name: Commit and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add images
          git commit -m "Add webcam image ${{ steps.commitinfo.outputs.date_part }} ${{ steps.commitinfo.outputs.time_part }}" || exit 0
          git push
